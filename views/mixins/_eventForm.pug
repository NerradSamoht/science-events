mixin eventForm(event = {})

	if !user
		.alert
			p You are not logged in. You can still submit an event, however you will not be able to edit the event. <br><a href="/login")>Sign in</a> or <a href="/register">Register for free!</a>

	if ((user && user.eb_organiser_id) || (user && user.admin))
		form(action=`/eb/add` method="POST" class="form")
			.fb.form__section
				.fb-50.pr-60
					h2 Eventbrite Import
					p Enter the event ID number to import an event from Eventbrite. Only events where you are register as the organiser and are categroised as 'Science' can be imported. More information on how to find the event id can be found 
						a(href="https://www.eventbrite.co.uk/support/articles/en_US/How_To/how-to-find-the-event-id" target="_blank" rel="noopener noreferrer") here.
				.fb-50.pt-16
					label(class="label" for="ebEventId") Eventbrite event id:
					.fb
						.fb-50
							input(class="input input--sml" type="text" id="ebEventId" name="eb_event_id" value=`${event.eb_id || ""}` required)
						.fb-50
							input(class="input input--sml button" type="submit" value="Get details")

	form(id="eventForm" class="form" method="POST" enctype="multipart/form-data")
		.form__section
			p <em>Fields marked with an asterix (*) are required.</em>

			.fb

				.fb-50.pr-60
					h2 Event Details
					p Register users will be able to select their event for editing on the 'My Events' page.

					p Expired events are automatically set for deletion and are removed from our database usually within a few days.

				.fb-50.pt-16

					//- Event Name
					label(class="label" for="event") Event name: *
					input(class="input" type="text" id="event" name="name" value=event.name required)

					//- Organisation Name
					label(class="label" for="organisation") Organisation: *
					input(class="input" type="text" id="organisation" name="organisation" value=event.organisation || (user && user.organisation) required)

					.fb
						.fb-50
							//- Start Datetime
							label(class="label" for="start") Start date: *
							input(class="input input--sml" type="date" name="start_datetime" pattern="[0-9]{4}-[0-9]{2}-[0-9]{2}" value=`${event.start_datetime ? event.start_datetime.toISOString().slice(0,10) : '' }` required)
						.fb-50
							//- End Datetime
							label(class="label" for="end") End date:
							input(class="input input--sml" type="date" id="end" name="end_datetime" pattern="[0-9]{4}-[0-9]{2}-[0-9]{2}" value=`${event.end_datetime ? event.end_datetime.toISOString().slice(0,10) : '' }`)

					//- Price range
					p If your event has different priced tickets then set both the minimum and maximum price:
					.fb
						.fb-50
							label(class="label" for="minPrice") Price / min (£):
							input(class="input input--sml" type="number" min="0.00" max="9999.99" step="0.01" id="minPrice" name="price_range[min_price]" value=(event.price_range && event.price_range.min_price) placeholder="0.00")
						.fb-50
							label(class="label" for="maxRange") Max price (£):
							input(class="input input--sml" type="number" min="0.01" max="9999.99" step="0.01" id="maxRange" name="price_range[max_price]" value=(event.price_range && event.price_range.max_price) placeholder="0.00")

					//- Website
					label(class="label" for="website") Event website:
					input(class="input" type="url" id="website" name="website" value=event.website placeholder="https://example.com")

					//- Extra tags
					p Check all that apply.
					
					input(class="checkbox" type="checkbox" id="familyFriendly" name="family_friendly" value="true" checked=(event.family_friendly))
					label(class="label--checkbox" for="familyFriendly") Suitable for children
					
					//- input(class="checkbox" type="checkbox" id="donation" name="donation" value="true" checked=(event.donation))
					//- label(class="label--checkbox" for="donation") Donation
					
					input(class="checkbox" type="checkbox" id="free" name="is_free" value="true" checked=(event.is_free))
					label(class="label--checkbox" for="free") Free


		//- Address
		.fb.form__section
			.fb-50.pr-60
				h2 Venue Address
				p Please enter the address of the event. The address will be displayed on our site and used to display a marker on our map.
			.fb-50.pt-16
				label(class="label" for="address") Event address: *
				input(class="input" type="text" id="address" name="location[address]" value=((event.location && event.location.address) || (user && user.address) ) required)
				input(type="hidden" name="location[coordinates][1]" id="lat" value=(event.location && event.location.coordinates[1]))
				input(type="hidden" name="location[coordinates][0]" id="lng" value=(event.location && event.location.coordinates[0]))



		//- Image upload
		if user

			.fb.form__section
				.fb-50.pr-60
					h2 Event Image
					p If no image is uploaded then a default image will be displayed. All images are compressed and resized to 800px width by 480px height (aspect ratio 5:3) on upload. Supported formats are jpg and png.
				.fb-50.pt-16
					label(class="label" for="image") Upload an image:
					input(class="input" type="file" name="image" id="file-input" accept="image/png, image/jpeg")
					if event.image
						if event.eb_id
							img(id="preview" src=`${event.image}`, alt='' width=400 height=200)
						else
							img(id="preview" src=`${event.image}`, alt='' width=400 height=200)
						input(type="hidden" id="image-url" name="image-url" value=`${event.image}`)
					else
						img(id="preview" src='' alt='' width=400 height=200)
						input(type="hidden" id="image-url" name="image-url" value='')


			//- Description (tinyMCE)
			.form__section.text--editor
				h2 Event Description
				p <strong>Important:</strong> Adding a description will create an event page on Science Near Me. If you would prefer for your event to link directly to an external site then leave the description blank.
				label(class="offscreen" for="description") Description:
				textarea(name="description" id="description")= event.description

		.offscreen
			p Only enter data in to the following field if you are a bot.
			label Email:
			input(type="text" name="yourEmail" id="yourEmail" placeholder="Your email" autocomplete="off" tabindex="-1")
			
		.buttons-group
			//- Submit
			input(id="submitEvent" class="button submit-event-button" type="submit" value="Submit Event" formaction=`/add/${event._id || ''}`)
		
			//- Delete event
			if (event._id)
				input(class="button delete-event-button button--danger" type="submit" value="Delete event" formaction=`/events/${event._id}/delete`)
	
	block scripts
			script(src="https://cdn.tiny.cloud/1/2j0e390z4afzde1vmezs5gp43iqh04df9x0xygj082r4ujgy/tinymce/5/tinymce.min.js" referrerpolicy="origin")
			script.
				tinymce.init({
					selector: '#description',
					height: 500, 
					menubar: "edit format insert",
					plugins: "lists link",
					default_link_target: "_blank",
					toolbar: 'undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | outdent indent | numlist bullist | link',
					contextmenu: false,
					link_context_toolbar: true,
					menu: {
						format: { title: 'Format', items: 'bold italic undeline strikethrough superscript subscript | forecolor backcolor | removeformat' }
					},
					style_formats: [
						{ title: 'Headings', items: [
							{ title: 'Heading 2', format: 'h2' },
							{ title: 'Heading 3', format: 'h3' },
							{ title: 'Heading 4', format: 'h4' }
						]},
						{ title: 'Inline', items: [
							{ title: 'Bold', format: 'bold' },
							{ title: 'Italic', format: 'italic' },
							{ title: 'Underline', format: 'underline' },
							{ title: 'Strikethrough', format: 'strikethrough' },
							{ title: 'Superscript', format: 'superscript' },
							{ title: 'Subscript', format: 'subscript' }
						]},
						{ title: 'Blocks', items: [
							{ title: 'Paragraph', format: 'p' },
							{ title: 'Blockquote', format: 'blockquote' }
						]}
					]
				})

			script.
				/*
					Function to carry out the actual PUT request to S3 using the signed request from the app.
				*/
				function uploadFile(file, signedRequest, url) {
					const xhr = new XMLHttpRequest();
					xhr.open('PUT', signedRequest);
					xhr.onreadystatechange = () => {
						if(xhr.readyState === 4) {
							if(xhr.status === 200) {
								document.getElementById('preview').src = url;
								document.getElementById('image-url').value = url;
							} else {
								alert('Could not upload file.');
							}
						}
					};
					xhr.send(file);
				}
				
				/*
					Function to get the temporary signed request from the app. If request successful, continue to upload the file using this signed request.
				*/
				function getSignedRequest(file) {
					const xhr = new XMLHttpRequest();
					xhr.open('GET', `/sign-s3?file-name=${file.name}&file-type=${file.type}`);
					xhr.onreadystatechange = () => {
						if(xhr.readyState === 4) {
							if(xhr.status === 200) {
								const response = JSON.parse(xhr.responseText);
								uploadFile(file, response.signedRequest, response.url);
							} else {
								alert('Could not get signed URL.');
							}
						}
					};
					xhr.send();
				}

				/*
					Function called when file input updated. If there is a file selected, then start upload procedure by asking for a signed request from the app.
				*/
				function initUpload() {
					const files = document.getElementById('file-input').files;
					const file = files[0];
					if(file == null) {
						return alert('No file selected.');
					}
					getSignedRequest(file);
				}
				
				/*
					Bind listeners when the page loads.
				*/
				(() => {
					document.getElementById('file-input').onchange = initUpload;
				})();